package cmake;

import generators.PlatformType;
import generators.ProjectSetup;
import generators.SolutionSetup;
import generators.SolutionType;
import project.Project;
import project.ProjectSources;
import project.Solution;
import project.dependencies.Dependency;
import rtti.RttiGeneratorCommand;
import utils.GeneratedFile;
import utils.GeneratedFilesCollection;
import utils.KeyValueTable;
import utils.Utils;
import vs.VsProjectRTTIGenSetup;
import vs.VsProjectSourcesSetup;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.InvalidParameterException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class CMakeSolutionSetup extends SolutionSetup {

    public Path solutionPath;

    //---

    public CMakeSolutionSetup(Solution baseSolution, KeyValueTable params) throws IOException {
        super(baseSolution, params);

        String rootModuleSolution = "CMakeLists.txt";

        this.solutionPath = rootOutputPath.resolve(rootModuleSolution);
        baseSolution.generatedSolutionFile = this.solutionPath;

        this.buildToolsPath = utils.Utils.getCurrentJar().getParentFile().toPath().normalize(); // gets the \build\tools\bin\
        this.buildScriptsPath = buildToolsPath.resolve("build/cmake/").normalize();

        if (baseSolution.platformType == PlatformType.WINDOWS)
            this.allPlatforms.add("x64");
       else
            this.allPlatforms.add(baseSolution.platformType.name);

        this.allConfigs.add("Debug");
        this.allConfigs.add("Checked");
        this.allConfigs.add("Release");

        System.out.printf("Build platform name: '%s'\n", platformType.name);
        System.out.printf("Build tools path: '%s'\n", buildToolsPath.toString());
        System.out.printf("Build scripts path: '%s'\n", buildScriptsPath.toString());

        System.out.printf("Build tools path: '%s'\n", buildToolsPath.toString());
        System.out.printf("Build scripts path: '%s'\n", buildScriptsPath.toString());

        // create new project stubs
        Map<Project, ProjectSetup> originalToProject = new HashMap<>();
        Map<ProjectSetup, Project> projectToOriginal = new HashMap<>();
        for (Project p : baseSolution.projects) {
            ProjectSetup vsp = null;

            if (p.enabled) {
                ProjectSources ps = (ProjectSources)p;
                if (ps != null) {
                    vsp = new CMakeProjectSourcesSetup(ps, this);
                }
            }

            if (vsp != null) {
                originalToProject.put(p, vsp);
                projectToOriginal.put(vsp, p);
                projects.add(vsp);
            }
        }

        // copy dependencies from input solution
        for (Project p : baseSolution.projects) {
            ProjectSetup vsp = originalToProject.get(p);
            if (vsp != null) {
                for (Dependency dep : p.dependencies) {
                    for (Project dependencyProject : dep.resolvedProjects) {
                        ProjectSetup depVsp = originalToProject.get(dependencyProject);
                        if (depVsp != null) {
                            vsp.projectDependencies.add(depVsp);
                        }
                    }
                }
            }
        }

        // create the rtti generator project
        /*{
            CMakeProjectRTTIGenSetup  rttiGen = new CMakeProjectRTTIGenSetup(this);
            for (ProjectSetup p : projects) {
                p.collectSortedSourcesDependencies();
                p.projectDependencies.add(rttiGen);
            }
            projects.add(rttiGen);
        }*/
    }

    //---

    @Override
    public void generateFiles(GeneratedFilesCollection files) {
        generateRTIIManifest(files);
        generateGluedBigHeader(files);
        generateSolutionFile(files);
    }

    private void generateSolutionFile(GeneratedFilesCollection files) {
        // Generate the project content
        // NOTE: we only generate content for enabled projects
        projects.parallelStream().forEach(p -> p.generateFiles(files));

        // create a writer
        GeneratedFile f = files.createFile(solutionPath);

        f.writeln("# Boomer Engine v4");
        f.writeln("# Written by Tomasz Jonarski (Rex Dex)");
        f.writeln("# AutoGenerated file. Please DO NOT MODIFY.");
        f.writeln("# Build system source code licensed under MIP license");
        f.writeln("");

        f.writeln("project(BoomerEngine)");
        f.writeln("");
        f.writeln("cmake_minimum_required(VERSION 2.8.10)");
        f.writeln("");

        //f.writeln("#SET(CMAKE_C_COMPILER /usr/bin/gcc)");
        //f.writeln("#SET(CMAKE_CXX_COMPILER /usr/bin/gcc)");
        //f.writeln("#set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)");
        //f.writeln("#set(CMAKE_DISABLE_SOURCE_CHANGES  ON)");

        f.writeln("set(CMAKE_VERBOSE_MAKEFILE ON)");
        f.writeln("set(CMAKE_COLOR_MAKEFILE ON)");
        f.writeln("set(CMAKE_CONFIGURATION_TYPES \"Debug;Checked;Release\")");
        f.writeln("set(OpenGL_GL_PREFERENCE \"GLVND\")");
        f.writelnf("set(CMAKE_MODULE_PATH %s)", escapePath(buildScriptsPath));
        f.writelnf("set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY %s)", escapePath(rootPublishPath.toAbsolutePath().toString() + "/$<CONFIG>/lib"));
        f.writelnf("set(CMAKE_LIBRARY_OUTPUT_DIRECTORY %s)", escapePath(rootPublishPath.toAbsolutePath().toString() + "/$<CONFIG>/lib"));
        f.writelnf("set(CMAKE_RUNTIME_OUTPUT_DIRECTORY %s)", escapePath(rootPublishPath.toAbsolutePath().toString() + "/$<CONFIG>/bin"));

        //if (solution.platformType == PlatformType.WINDOWS)
        f.writeln("set_property(GLOBAL PROPERTY USE_FOLDERS ON)");

        f.writeln("");

        f.writeln("#include(cotire)");
        f.writeln("#include(PrecompiledHeader)");
        f.writeln("include(OptimizeForArchitecture)"); // Praise OpenSource!
        f.writeln("");

        for (ProjectSetup p : projects) {
            f.writelnf("add_subdirectory(%s)", escapePath(p.generatedProjectPath.getParent()));
        }
    }

}
