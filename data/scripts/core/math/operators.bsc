// BoomerEngine Script interface
// (C) 2017-2020 by Tomasz "RexDex" Jonarski
//
// Basic numerical operators
// NOTE: internal file, do not modify

//-----
// most of the math operations happen with signed types

import operator+ int (int a, int b) opcode(AddInt32);
import operator- int (int a, int b) opcode(SubInt32);
import operator* int (int a, int b) opcode(MulSigned32);
import operator/ int (int a, int b) opcode(DivSigned32);
import operator% int (int a, int b) opcode(ModSigned32);
import operator- int (int a) opcode(NegSigned32);

import operator+ int64 (int64 a, int64 b) opcode(AddInt64);
import operator- int64 (int64 a, int64 b) opcode(SubInt64);
import operator* int64 (int64 a, int64 b) opcode(MulSigned64);
import operator/ int64 (int64 a, int64 b) opcode(DivSigned64);
import operator% int64 (int64 a, int64 b) opcode(ModSigned64);
import operator- int64 (int64 a) opcode(NegSigned64);

import operator+ uint (uint a, uint b) opcode(AddInt32);
import operator- uint (uint a, uint b) opcode(SubInt32);
import operator* uint (uint a, uint b) opcode(MulUnsigned32);
import operator/ uint (uint a, uint b) opcode(DivUnsigned32);
import operator% uint (uint a, uint b) opcode(ModUnsigned32);

import operator+ uint64 (uint64 a, uint64 b) opcode(AddInt64);
import operator- uint64 (uint64 a, uint64 b) opcode(SubInt64);
import operator* uint64 (uint64 a, uint64 b) opcode(MulUnsigned64);
import operator/ uint64 (uint64 a, uint64 b) opcode(DivUnsigned64);
import operator% uint64 (uint64 a, uint64 b) opcode(Modunsigned64);

import operator+ float (float a, float b) opcode(AddFloat);
import operator- float (float a, float b) opcode(SubFloat);
import operator* float (float a, float b) opcode(MulFloat);
import operator/ float (float a, float b) opcode(DivFloat);
import operator% float (float a, float b) opcode(ModFloat);
import operator- float (float a) opcode(NegFloat);

import operator+ double (double a, double b) opcode(AddDouble);
import operator- double (double a, double b) opcode(SubDouble);
import operator* double (double a, double b) opcode(MulDouble);
import operator/ double (double a, double b) opcode(DivDouble);
import operator% double (double a, double b) opcode(ModDouble);
import operator- double (double a) opcode(NegDouble);

//----
// binary operations are done on matching types always

import operator& uint8 (uint8 a, uint8 b) opcode(BitAnd8);
import operator| uint8 (uint8 a, uint8 b) opcode(BitOr8);
import operator^ uint8 (uint8 a, uint8 b) opcode(BitXor8);
import operator~ uint8 (uint8 a) opcode(BitNot8);

import operator& uint16 (uint16 a, uint16 b) opcode(BitAnd16);
import operator| uint16 (uint16 a, uint16 b) opcode(BitOr16);
import operator^ uint16 (uint16 a, uint16 b) opcode(BitXor16);
import operator~ uint16 (uint16 a) opcode(BitNot16);

import operator& uint (uint a, uint b) opcode(BitAnd32);
import operator| uint (uint a, uint b) opcode(BitOr32);
import operator^ uint (uint a, uint b) opcode(BitXor32);
import operator~ uint (uint a) opcode(BitNot32);

import operator& uint64 (uint64 a, uint64 b) opcode(BitAnd64);
import operator| uint64 (uint64 a, uint64 b) opcode(BitOr64);
import operator^ uint64 (uint64 a, uint64 b) opcode(BitXor64);
import operator~ uint64 (uint64 a) opcode(BitNot64);

import operator& int8 (int8 a, int8 b) opcode(BitAnd8);
import operator| int8 (int8 a, int8 b) opcode(BitOr8);
import operator^ int8 (int8 a, int8 b) opcode(BitXor8);
import operator~ int8 (int8 a) opcode(BitNot8);

import operator& int16 (int16 a, int16 b) opcode(BitAnd16);
import operator| int16 (int16 a, int16 b) opcode(BitOr16);
import operator^ int16 (int16 a, int16 b) opcode(BitXor16);
import operator~ int16 (int16 a) opcode(BitNot16);

import operator& int (int a, int b) opcode(BitAnd32);
import operator| int (int a, int b) opcode(BitOr32);
import operator^ int (int a, int b) opcode(BitXor32);
import operator~ int (int a) opcode(BitNot32);

import operator& int64 (int64 a, int64 b) opcode(BitAnd64);
import operator| int64 (int64 a, int64 b) opcode(BitOr64);
import operator^ int64 (int64 a, int64 b) opcode(BitXor64);
import operator~ int64 (int64 a) opcode(BitNot64);

//----
// shift operators
// NOTE: only signed values

import operator<< uint (uint8 a, uint8 shift) opcode(BitShl8);
import operator>> uint8 (uint8 a, uint8 shift) opcode(BitShr8);
import operator>>> uint8 (uint8 a, uint8 shift) opcode(BitSar8);

import operator<< uint (uint16 a, uint8 shift) opcode(BitShl16);
import operator>> uint16 (uint16 a, uint8 shift) opcode(BitShr16);
import operator>>> uint16 (uint16 a, uint8 shift) opcode(BitSar16);

import operator<< uint (uint a, uint8 shift) opcode(BitShl32);
import operator>> uint (uint a, uint8 shift) opcode(BitShr32);
import operator>>> uint (uint a, uint8 shift) opcode(BitSar32);

import operator<< uint64 (uint64 a, uint8 shift) opcode(BitShl64);
import operator>> uint64 (uint64 a, uint8 shift) opcode(BitShr64);
import operator>>> int64 (uint64 a, uint8 shift) opcode(BitSar64);

//-----
// comparision works directly on types

import operator== bool (int8 a, int8 b) opcode(TestEqual1);
import operator!= bool (int8 a, int8 b) opcode(TestNotEqual1);
import operator< bool (int8 a, int8 b) opcode(TestSignedLess1);
import operator<= bool (int8 a, int8 b) opcode(TestSignedLessEqual1);
import operator> bool (int8 a, int8 b) opcode(TestSignedGreater1);
import operator>= bool (int8 a, int8 b) opcode(TestSignedGreaterEqual1);

import operator== bool (int16 a, int16 b) opcode(TestEqual2);
import operator!= bool (int16 a, int16 b) opcode(TestNotEqual2);
import operator< bool (int16 a, int16 b) opcode(TestSignedLess2);
import operator<= bool (int16 a, int16 b) opcode(TestSignedLessEqual2);
import operator> bool (int16 a, int16 b) opcode(TestSignedGreater2);
import operator>= bool (int16 a, int16 b) opcode(TestSignedGreaterEqual2);

import operator== bool (int a, int b) opcode(TestEqual4);
import operator!= bool (int a, int b) opcode(TestNotEqual4);
import operator< bool (int a, int b) opcode(TestSignedLess4);
import operator<= bool (int a, int b) opcode(TestSignedLessEqual4);
import operator> bool (int a, int b) opcode(TestSignedGreater4);
import operator>= bool (int a, int b) opcode(TestSignedGreaterEqual4);

import operator== bool (int64 a, int64 b) opcode(TestEqual8);
import operator!= bool (int64 a, int64 b) opcode(TestNotEqual8);
import operator< bool (int64 a, int64 b) opcode(TestSignedLess8);
import operator<= bool (int64 a, int64 b) opcode(TestSignedLessEqual8);
import operator> bool (int64 a, int64 b) opcode(TestSignedGreater8);
import operator>= bool (int64 a, int64 b) opcode(TestSignedGreaterEqual8);

import operator== bool (uint8 a, uint8 b) opcode(TestEqual1);
import operator!= bool (uint8 a, uint8 b) opcode(TestNotEqual1);
import operator< bool (uint8 a, uint8 b) opcode(TestUnsignedLess1);
import operator<= bool (uint8 a, uint8 b) opcode(TestUnsignedLessEqual1);
import operator> bool (uint8 a, uint8 b) opcode(TestUnsignedGreater1);
import operator>= bool (uint8 a, uint8 b) opcode(TestUnsignedGreaterEqual1);

import operator== bool (uint16 a, uint16 b) opcode(TestEqual2);
import operator!= bool (uint16 a, uint16 b) opcode(TestNotEqual2);
import operator< bool (uint16 a, uint16 b) opcode(TestUnsignedLess2);
import operator<= bool (uint16 a, uint16 b) opcode(TestUnsignedLessEqual2);
import operator> bool (uint16 a, uint16 b) opcode(TestUnsignedGreater2);
import operator>= bool (uint16 a, uint16 b) opcode(TestUnsignedGreaterEqual2);

import operator== bool (uint a, uint b) opcode(TestEqual4);
import operator!= bool (uint a, uint b) opcode(TestNotEqual4);
import operator< bool (uint a, uint b) opcode(TestUnsignedLess4);
import operator<= bool (uint a, uint b) opcode(TestUnsignedLessEqual4);
import operator> bool (uint a, uint b) opcode(TestUnsignedGreater4);
import operator>= bool (uint a, uint b) opcode(TestUnsignedGreaterEqual4);

import operator== bool (uint64 a, uint64 b) opcode(TestEqual8);
import operator!= bool (uint64 a, uint64 b) opcode(TestNotEqual8);
import operator< bool (uint64 a, uint64 b) opcode(TestUnsignedLess8);
import operator<= bool (uint64 a, uint64 b) opcode(TestUnsignedLessEqual8);
import operator> bool (uint64 a, uint64 b) opcode(TestUnsignedGreater8);
import operator>= bool (uint64 a, uint64 b) opcode(TestUnsignedGreaterEqual8);

import operator== bool (float a, float b) opcode(TestFloatEqual4);
import operator!= bool (float a, float b) opcode(TestFloatNotEqual4);
import operator< bool (float a, float b) opcode(TestFloatLess4);
import operator<= bool (float a, float b) opcode(TestFloatLessEqual4);
import operator> bool (float a, float b) opcode(TestFloatGreater4);
import operator>= bool (float a, float b) opcode(TestFloatGreaterEqual4);

import operator== bool (double a, double b) opcode(TestFloatEqual8);
import operator!= bool (double a, double b) opcode(TestFloatNotEqual8);
import operator< bool (double a, double b) opcode(TestFloatLess8);
import operator<= bool (double a, double b) opcode(TestFloatLessEqual8);
import operator> bool (double a, double b) opcode(TestFloatGreater8);
import operator>= bool (double a, double b) opcode(TestFloatGreaterEqual8);

//-----
// boolean operators

import operator== bool (bool a, bool b) opcode(TestEqual1);
import operator!= bool (bool a, bool b) opcode(TestNotEqual1);

import operator&& bool (bool a, bool b) opcode(LogicAnd);
import operator|| bool (bool a, bool b) opcode(LogicOr);
import operator^ bool (bool a, bool b) opcode(LogicXor);
import operator! bool (bool a) opcode(LogicNot);

//-----
// pre increment/decrement operator

import operator++ int8 (out int8 a) opcode(PreIncrement8);
import operator++ int16 (out int16 a) opcode(PreIncrement16);
import operator++ int (out int a) opcode(PreIncrement32);
import operator++ int64 (out int64 a) opcode(PreIncrement64);

import operator-- int8 (out int8 a) opcode(PreDecrement8);
import operator-- int16 (out int16 a) opcode(PreDecrement16);
import operator-- int (out int a) opcode(PreDecrement32);
import operator-- int64 (out int64 a) opcode(PreDecrement64);

import operator++ uint8 (out uint8 a) opcode(PreIncrement8);
import operator++ uint16 (out uint16 a) opcode(PreIncrement16);
import operator++ uint (out uint a) opcode(PreIncrement32);
import operator++ uint64 (out uint64 a) opcode(PreIncrement64);

import operator-- uint8 (out uint8 a) opcode(PreDecrement8);
import operator-- uint16 (out uint16 a) opcode(PreDecrement16);
import operator-- uint (out uint a) opcode(PreDecrement32);
import operator-- uint64 (out uint64 a) opcode(PreDecrement64);

//-----
// post increment/decrement operator

import operator++ int8 (out int8 a, int post) opcode(PostIncrement8);
import operator++ int16 (out int16 a, int post) opcode(PostIncrement16);
import operator++ int (out int a, int post) opcode(PostIncrement32);
import operator++ int64 (out int64 a, int post) opcode(PostIncrement64);

import operator-- int8 (out int8 a, int post) opcode(PostDecrement8);
import operator-- int16 (out int16 a, int post) opcode(PostDecrement16);
import operator-- int (out int a, int post) opcode(PostDecrement32);
import operator-- int64 (out int64 a, int post) opcode(PostDecrement64);

import operator++ uint8 (out uint8 a, int post) opcode(PostIncrement8);
import operator++ uint16 (out uint16 a, int post) opcode(PostIncrement16);
import operator++ uint (out uint a, int post) opcode(PostIncrement32);
import operator++ uint64 (out uint64 a, int post) opcode(PostIncrement64);

import operator-- uint8 (out uint8 a, int post) opcode(PostDecrement8);
import operator-- uint16 (out uint16 a, int post) opcode(PostDecrement16);
import operator-- uint (out uint a, int post) opcode(PostDecrement32);
import operator-- uint64 (out uint64 a, int post) opcode(PostDecrement64);

//-----
// assignment operators

import operator+= int8 (out int8 a, int8 b) opcode(AddAssignInt8);
import operator-= int8 (out int8 a, int8 b) opcode(SubAssignInt8);
import operator*= int8 (out int8 a, int8 b) opcode(MulAssignSignedInt8);
import operator/= int8 (out int8 a, int8 b) opcode(DivAssignSignedInt8);
import operator&= int8 (out int8 a, int8 b) opcode(BitAndAssign8);
import operator|= int8 (out int8 a, int8 b) opcode(BitOrAssign8);
import operator^= int8 (out int8 a, int8 b) opcode(BitXorAssign8);
import operator<<= int8 (out int8 a, uint8 b) opcode(BitShlAssign8);
import operator>>= int8 (out int8 a, uint8 b) opcode(BitShrAssign8);
import operator>>>= int8 (out int8 a, uint8 b) opcode(BitSarAssign8);

import operator+= int16 (out int16 a, int16 b) opcode(AddAssignInt16);
import operator-= int16 (out int16 a, int16 b) opcode(SubAssignInt16);
import operator*= int16 (out int16 a, int16 b) opcode(MulAssignSignedInt16);
import operator/= int16 (out int16 a, int16 b) opcode(DivAssignSignedInt16);
import operator&= int16 (out int16 a, int16 b) opcode(BitAndAssign16);
import operator|= int16 (out int16 a, int16 b) opcode(BitOrAssign16);
import operator^= int16 (out int16 a, int16 b) opcode(BitXorAssign16);
import operator<<= int16 (out int16 a, uint8 b) opcode(BitShlAssign16);
import operator>>= int16 (out int16 a, uint8 b) opcode(BitShrAssign16);
import operator>>>= int16 (out int16 a, uint8 b) opcode(BitSarAssign16);

import operator+= int (out int a, int b) opcode(AddAssignInt32);
import operator-= int (out int a, int b) opcode(SubAssignInt32);
import operator*= int (out int a, int b) opcode(MulAssignSignedInt32);
import operator/= int (out int a, int b) opcode(DivAssignSignedInt32);
import operator&= int (out int a, int b) opcode(BitAndAssign32);
import operator|= int (out int a, int b) opcode(BitOrAssign32);
import operator^= int (out int a, int b) opcode(BitXorAssign32);
import operator<<= int (out int a, uint8 b) opcode(BitShlAssign32);
import operator>>= int (out int a, uint8 b) opcode(BitShrAssign32);
import operator>>>= int (out int a, uint8 b) opcode(BitSarAssign32);

import operator+= int64 (out int64 a, int64 b) opcode(AddAssignInt64);
import operator-= int64 (out int64 a, int64 b) opcode(SubAssignInt64);
import operator*= int64 (out int64 a, int64 b) opcode(MulAssignSignedInt64);
import operator/= int64 (out int64 a, int64 b) opcode(DivAssignSignedInt64);
import operator&= int64 (out int64 a, int64 b) opcode(BitAndAssign64);
import operator|= int64 (out int64 a, int64 b) opcode(BitOrAssign64);
import operator^= int64 (out int64 a, int64 b) opcode(BitXorAssign64);
import operator<<= int64 (out int64 a, uint8 b) opcode(BitShlAssign64);
import operator>>= int64 (out int64 a, uint8 b) opcode(BitShrAssign64);
import operator>>>= int64 (out int64 a, uint8 b) opcode(BitSarAssign64);

//-----
// assignment operators for unsigned types

import operator+= uint8 (out uint8 a, uint8 b) opcode(AddAssignInt8);
import operator-= uint8 (out uint8 a, uint8 b) opcode(SubAssignInt8);
import operator*= uint8 (out uint8 a, uint8 b) opcode(MulAssignUnsignedInt8);
import operator/= uint8 (out uint8 a, uint8 b) opcode(DivAssignUnsignedInt8);
import operator&= uint8 (out uint8 a, uint8 b) opcode(BitAndAssign8);
import operator|= uint8 (out uint8 a, uint8 b) opcode(BitOrAssign8);
import operator^= uint8 (out uint8 a, uint8 b) opcode(BitXorAssign8);
import operator<<= uint8 (out uint8 a, uint8 b) opcode(BitShlAssign8);
import operator>>= uint8 (out uint8 a, uint8 b) opcode(BitShrAssign8);

import operator+= uint16 (out uint16 a, uint16 b) opcode(AddAssignInt16);
import operator-= uint16 (out uint16 a, uint16 b) opcode(SubAssignInt16);
import operator*= uint16 (out uint16 a, uint16 b) opcode(MulAssignUnsignedInt16);
import operator/= uint16 (out uint16 a, uint16 b) opcode(DivAssignUnsignedInt16);
import operator&= uint16 (out uint16 a, uint16 b) opcode(BitAndAssign16);
import operator|= uint16 (out uint16 a, uint16 b) opcode(BitOrAssign16);
import operator^= uint16 (out uint16 a, uint16 b) opcode(BitXorAssign16);
import operator<<= uint16 (out uint16 a, uint8 b) opcode(BitShlAssign16);
import operator>>= uint16 (out uint16 a, uint8 b) opcode(BitShrAssign16);

import operator+= uint (out uint a, uint b) opcode(AddAssignInt32);
import operator-= uint (out uint a, uint b) opcode(SubAssignInt32);
import operator*= uint (out uint a, uint b) opcode(MulAssignUnsignedInt32);
import operator/= uint (out uint a, uint b) opcode(DivAssignUnsignedInt32);
import operator&= uint (out uint a, uint b) opcode(BitAndAssign32);
import operator|= uint (out uint a, uint b) opcode(BitOrAssign32);
import operator^= uint (out uint a, uint b) opcode(BitXorAssign32);
import operator<<= uint (out uint a, uint8 b) opcode(BitShlAssign32);
import operator>>= uint (out uint a, uint8 b) opcode(BitShrAssign32);

import operator+= uint64 (out uint64 a, uint64 b) opcode(AddAssignInt64);
import operator-= uint64 (out uint64 a, uint64 b) opcode(SubAssignInt64);
import operator*= uint64 (out uint64 a, uint64 b) opcode(MulAssignUnsignedInt64);
import operator/= uint64 (out uint64 a, uint64 b) opcode(DivAssignUnsignedInt64);
import operator&= uint64 (out uint64 a, uint64 b) opcode(BitAndAssign64);
import operator|= uint64 (out uint64 a, uint64 b) opcode(BitOrAssign64);
import operator^= uint64 (out uint64 a, uint64 b) opcode(BitXorAssign64);
import operator<<= uint64 (out uint64 a, uint8 b) opcode(BitShlAssign64);
import operator>>= uint64 (out uint64 a, uint8 b) opcode(BitShrAssign64);

//-----
// assignment operators for float types

import operator+= float (out float a, float b) opcode(AddAssignFloat);
import operator-= float (out float a, float b) opcode(SubAssignFloat);
import operator*= float (out float a, float b) opcode(MulAssignFloat);
import operator/= float (out float a, float b) opcode(DivAssignFloat);

import operator+= double (out double a, double b) opcode(AddAssignDouble);
import operator-= double (out double a, double b) opcode(SubAssignDouble);
import operator*= double (out double a, double b) opcode(MulAssignDouble);
import operator/= double (out double a, double b) opcode(DivAssignDouble);

//----
// string operators

import operator+ string (ref string a, ref string b);
import operator+= string (out string a, ref string b);

