// BoomerEngine Script interface
// (C) 2017-2020 by Tomasz "RexDex" Jonarski
//
// Casting functions
// NOTE: internal file, do not modify

//-----

// NOTE: casting is preffered as opcode since it's much faster to run than a function
// We have the following opcodes dedicated just to casting implemented in the VM:

// ExpandSigned8To16
// ExpandSigned8To32
// ExpandSigned8To64
// ExpandSigned16To32
// ExpandSigned16To64
// ExpandSigned32To64
// ExpandUnsigned8To16
// ExpandUnsigned8To32
// ExpandUnsigned8To64
// ExpandUnsigned16To32
// ExpandUnsigned16To64
// ExpandUnsigned32To64

// Contract64To32
// Contract64To16
// Contract64To8
// Contract32To16
// Contract32To8
// Contract16To8
// FloatToInt8
// FloatToInt16
// FloatToInt32
// FloatToInt64
// FloatToUint8
// FloatToUint16
// FloatToUint32
// FloatToUint64
// FloatToDouble
// FloatFromInt8
// FloatFromInt16
// FloatFromInt32
// FloatFromInt64
// FloatFromUint8
// FloatFromUint16
// FloatFromUint32
// FloatFromUint64
// FloatFromDouble
// DoubleToInt8
// DoubleToInt16
// DoubleToInt32
// DoubleToInt64
// DoubleToUint8
// DoubleToUint16
// DoubleToUint32
// DoubleToUint64
// DoubleFromInt8
// DoubleFromInt16
// DoubleFromInt32
// DoubleFromInt64
// DoubleFromUint8
// DoubleFromUint16
// DoubleFromUint32
// DoubleFromUint64
// NumberToBool8
// NumberToBool16
// NumberToBool32
// NumberToBool64
// FloatToBool
// DoubleToBool

// fast string conversions:
// Int8ToString
// Int16ToString
// Int32ToString
// Int64ToString
// Uint8ToString
// Uint16ToString
// Uint32ToString
// Uint64ToString
// FloatToString
// DoubleToString
// EnumToString
// BoolToString

//-----

// NOTE: we try to follow the rules of C++ from here:
// https://en.cppreference.com/w/cpp/language/implicit_conversion

// cast types:
// no argument - cast will be performed only
// unsafe - cast will be performed automatically but with a warning (typical example is int -> float, float -> int)
// explicit - cast is possible but requires an explicit call, like: int8()

// by rule of thumb any cast that is guaranteed NOT to lose data (promotion) is implicit and has cost(1)
// casts between singed and unsigned types are implicit but have a cost(2) just to be not preffered in operators if a dedicated operator exists

//-------
// signed types

import cast(1) int16  (int8 a) opcode(ExpandSigned8To16);
import cast(1) int    (int8 a) opcode(ExpandSigned8To32);
import cast(1) int64  (int8 a) opcode(ExpandSigned8To64);
import cast(2) uint8  (int8 a) opcode(Nop);
import cast(2) uint16 (int8 a) opcode(ExpandSigned8To16);
import cast(2) uint   (int8 a) opcode(ExpandSigned8To32);
import cast(2) uint64 (int8 a) opcode(ExpandSigned8To64);
import cast(3) float  (int8 a) opcode(FloatFromInt8);
import cast(3) double (int8 a) opcode(DoubleFromInt8);
import cast(5) bool   (int8 a) opcode(NumberToBool8);

import unsafe cast(4) int8   (int16 a) opcode(Contract16To8);
import        cast(1) int    (int16 a) opcode(ExpandSigned16To32);
import        cast(1) int64  (int16 a) opcode(ExpandSigned16To64);
import unsafe cast(4) uint8  (int16 a) opcode(Contract16To8);
import        cast(2) uint16 (int16 a) opcode(Nop);
import        cast(2) uint   (int16 a) opcode(ExpandSigned16To32);
import        cast(2) uint64 (int16 a) opcode(ExpandSigned16To64);
import        cast(3) float  (int16 a) opcode(FloatFromInt16);
import        cast(3) double (int16 a) opcode(DoubleFromInt16);
import        cast(5) bool   (int16 a) opcode(NumberToBool16);

import unsafe cast(4) int8   (int a) opcode(Contract32To8);
import unsafe cast(4) int16  (int a) opcode(Contract32To16);
import        cast(1) int64  (int a) opcode(ExpandSigned32To64);
import unsafe cast(4) uint8  (int a) opcode(Contract32To8);
import unsafe cast(4) uint16 (int a) opcode(Contract32To16);
import        cast(2) uint   (int a) opcode(Nop);
import        cast(2) uint64 (int a) opcode(ExpandSigned32To64);
import unsafe cast(3) float  (int a) opcode(FloatFromInt32);
import        cast(3) double (int a) opcode(DoubleFromInt32);
import        cast(5) bool   (int a) opcode(NumberToBool32);

// note: int64 is more special than int thus most of the casts are explcit
import explicit cast(4) int8   (int64 a) opcode(Contract64To8);
import explicit cast(4) int16  (int64 a) opcode(Contract64To16);
import explicit cast(4) int    (int64 a) opcode(Contract64To32);
import explicit cast(4) uint8  (int64 a) opcode(Contract64To8);
import explicit cast(4) uint16 (int64 a) opcode(Contract64To16);
import explicit cast(4) uint   (int64 a) opcode(Contract64To32);
import          cast(2) uint64 (int64 a) opcode(Nop);
import explicit cast(4) float  (int64 a) opcode(FloatFromInt64);
import explicit cast(4) double (int64 a) opcode(DoubleFromInt64);
import          cast(4) bool   (int64 a) opcode(NumberToBool64);

//-------
// unsigned types

import cast(2) int8 (uint8 a) opcode(Nop);
import cast(2) int16 (uint8 a) opcode(ExpandUnsigned8To16);
import cast(2) int (uint8 a) opcode(ExpandUnsigned8To32);
import cast(2) int64 (uint8 a) opcode(ExpandUnsigned8To64);
import cast(1) uint16 (uint8 a) opcode(ExpandUnsigned8To16);
import cast(1) uint (uint8 a) opcode(ExpandUnsigned8To32);
import cast(1) uint64 (uint8 a) opcode(ExpandUnsigned8To64);
import cast(3) float (uint8 a) opcode(FloatFromUint8);
import cast(3) double (uint8 a) opcode(FloatFromUint16);
import cast(5) bool (uint8 a) opcode(NumberToBool8);

import unsafe cast(4) int8 (uint16 a) opcode(Contract16To8);
import        cast(2) int16 (uint16 a) opcode(Nop);
import        cast(2) int (uint16 a) opcode(ExpandUnsigned16To32);
import        cast(2) int64 (uint16 a) opcode(ExpandUnsigned16To64);
import unsafe cast(4) uint8 (uint16 a) opcode(Contract16To8);
import        cast(1) uint (uint16 a) opcode(ExpandUnsigned16To32);
import        cast(1) uint64 (uint16 a) opcode(ExpandUnsigned16To32);
import        cast(3) float (uint16 a) opcode(FloatFromUint16);
import        cast(3) double (uint16 a) opcode(DoubleFromUint16);
import        cast(5) bool (uint16 a) opcode(NumberToBool16);

import unsafe cast(4) int8 (uint a) opcode(Contract32To8);
import unsafe cast(4) int16 (uint a) opcode(Contract32To16);
import        cast(2) int (uint a) opcode(Nop);
import        cast(2) int64 (uint a) opcode(ExpandUnsigned32To64);
import unsafe cast(4) uint8 (uint a) opcode(Contract32To8);
import unsafe cast(4) uint16 (uint a) opcode(Contract32To16);
import        cast(1) uint64 (uint a) opcode(ExpandUnsigned32To64);
import unsafe cast(3) float (uint a) opcode(FloatFromUint32);
import        cast(3) double (uint a) opcode(FloatFromUint32);
import        cast(5) bool (uint a) opcode(NumberToBool64);

// note: uint64 is more special than int thus most of the casts are explcit
import explicit cast(4) int8 (uint64 a) opcode(Contract64To8);
import explicit cast(4) int16 (uint64 a) opcode(Contract64To16);
import explicit cast(4) int (uint64 a) opcode(Contract64To32);
import explicit cast(4) uint8 (uint64 a) opcode(Contract64To8);
import explicit cast(4) uint16 (uint64 a) opcode(Contract64To16);
import explicit cast(4) uint (uint64 a) opcode(Contract64To32);
import          cast(2) uint64 (uint64 a) opcode(Nop);
import explicit cast(4) float (uint64 a) opcode(FloatFromUint64);
import explicit cast(4) double (uint64 a) opcode(DoubleFromUint64);
import          cast(4) bool (uint64 a) opcode(NumberToBool64);

//-----
// floating point types

import explicit cast(3) int8 (float a) opcode(FloatToInt8);
import explicit cast(3) int16 (float a) opcode(FloatToInt16);
import explicit cast(3) int (float a) opcode(FloatToInt32);
import explicit cast(3) int64 (float a) opcode(FloatToInt64);
import explicit cast(3) uint8 (float a) opcode(FloatToUint8);
import explicit cast(3) uint16 (float a) opcode(FloatToUint16);
import explicit cast(3) uint (float a) opcode(FloatToUint32);
import explicit cast(3) uint64 (float a) opcode(FloatToUint64);
import          cast(1) double (float a) opcode(FloatToDouble);
import          cast(5) bool (float a) opcode(FloatToBool);

import explicit cast(3) int8 (double a) opcode(DoubleToInt8);
import explicit cast(3) int16 (double a) opcode(DoubleToInt16);
import explicit cast(3) int (double a) opcode(DoubleToInt32);
import explicit cast(3) int64 (double a) opcode(DoubleToInt64);
import explicit cast(3) uint8 (double a) opcode(DoubleToUint8);
import explicit cast(3) uint16 (double a) opcode(DoubleToUint16);
import explicit cast(3) uint (double a) opcode(DoubleToUint32);
import explicit cast(3) uint64 (double a) opcode(DoubleToUint64);
import explicit cast(3) float (double a) opcode(FloatFromDouble);
import          cast(5) bool (double a) opcode(DoubleToBool);

//-----
// string conversion for basic types

import explicit cast(10) string (int8 a);// opcode(Int8ToString);
import explicit cast(10) string (int16 a);// opcode(Int16ToString);
import explicit cast(10) string (int a);// opcode(Int32ToString);
import explicit cast(10) string (int64 a);// opcode(Int64ToString);
import explicit cast(10) string (uint8 a);// opcode(Uint8ToString);
import explicit cast(10) string (uint16 a);// opcode(Uint16ToString);
import explicit cast(10) string (uint a);// opcode(Uint32ToString);
import explicit cast(10) string (uint64 a);// opcode(Uint64ToString);
import explicit cast(10) string (float a);// opcode(FloatToString);
import explicit cast(10) string (double a);// opcode(DoubleToString);
import explicit cast(10) string (bool a);// opcode(BoolToString);

//-----
// name type intergration

import cast(20) string (strid a);// opcode(NameToString);
import cast(5) bool (strid a) opcode(NameToBool);

//-----

// bit cast integer to float
// NOTE: sign is preserved, ordering as well (except for nans)
import function float BitCastIntToFloat(int a) opcode(Nop);

// bit cast integer to float
import function int BitCastFloatToInt(float a) opcode(Nop);

//-----

// bit cast int64 to double
// NOTE: sign is preserved, ordering as well (except for nans)
import function double BitCastInt64ToDouble(int64 a) opcode(Nop);

// bit cast integer to float
import function int64 BitCastDoubleToInt64(double a) opcode(Nop);

//-----

// convert a half precision floating point nubmer to a full float
import function float HalfToFloat(uint16 a);

// encode a half precission floating point number from a normal float
import function uint16 FloatToHalf(float a);

//-----
