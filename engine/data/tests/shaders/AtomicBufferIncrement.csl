/***
* Boomer Engine v4 2015-2017
* Written by Tomasz "Rex Dex" Jonarski
***/

//--


#include "common.h"

descriptor TestParams
{
    attribute(format=r32i, uav) Buffer BufferData;
}

shader GeneratePS
{
	in vec4 Color;
	attribute(flat) in uint TriangleID;

	void runtAtomicOp()
	{
		atomicIncrement(BufferData[gl_FragCoord.x]);
	}
	
	void main()
	{	
		gl_Target0 = Color;
		runtAtomicOp();
	}
}

shader GenerateVS
{
	vertex Simple3DVertex v;

	out vec4 Color;
	out uint TriangleID;

	void main()
	{
		gl_Position = v.pos.xyz1;
		Color = v.color;
		TriangleID = gl_VertexID / 3;
	}
}

//--

shader DrawVS
{
	vertex Simple3DVertex v;

	out vec4 Color;
	
	float DrawScale()
	{
		return 10000.0f
	}

	void main()
	{
	    Color = v.color.xyz1;

		gl_Position = v.pos.xyz1;
		uint pixelPosition = (uint)(1024.0f * saturate(0.5f + 0.5f * gl_Position.x));
		gl_Position.y -= BufferData[pixelPosition] / DrawScale();
	}
}

shader DrawPS
{
	in vec4 Color;

	void main()
	{
		gl_Target0 = Color;
	}
}

//--

shader ClearCS
{
	attribute(local_size_x=8, local_size_y=1)
	void main()
	{
	    BufferData[gl_GlobalInvocationID.x] = 0;
	} 
}

//--

program Draw
{	
	shader VertexShader = shader<DrawVS> {};
	shader PixelShader = shader<DrawPS> {};
}

program Generate
{	
	shader VertexShader = shader<GenerateVS> {};
	shader PixelShader = shader<GeneratePS> {};
}

program Clear
{	
	shader ComputeShader = shader<ClearCS> {};
}

export Draw = program<Draw>{};
export Generate = program<Generate>{};
export Clear = program<Clear>{};