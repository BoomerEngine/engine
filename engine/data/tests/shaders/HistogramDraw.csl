/***
* Boomer Engine v4 2015-2017
* Written by Tomasz "Rex Dex" Jonarski
***/

#include "common.h"

//--

descriptor DrawHistogramDesc
{
    ConstantBuffer
    {
		uint NumBuckets;
		int _padding1;
		int _padding2;
		int _padding3;

		vec4 LineColor;

		float OffsetX;
		float OffsetY;
		float SizeX;
		float SizeY;
    }

	attribute(readonly, format=r32i) Buffer HistogramBuffer;
}

//--

state Lines
{
	PrimitiveTopology = LineStrip,
}

attribute(state=Lines)
export shader DrawVS
{
	void main()
	{
		float histogramMinRange = intBitsToFloat(HistogramBuffer[NumBuckets+0]);
		float histogramMaxRange = intBitsToFloat(HistogramBuffer[NumBuckets+1]);
		float histogramMaxValue = HistogramBuffer[NumBuckets+2];

		float groupMinRange = intBitsToFloat(HistogramBuffer[NumBuckets+3]);
		float groupMaxRange = intBitsToFloat(HistogramBuffer[NumBuckets+4]);
		float groupMaxValue = HistogramBuffer[NumBuckets+5];

		float localValueIndex = histogramMinRange + (histogramMaxRange - histogramMinRange) * (gl_VertexID / (float)(NumBuckets-1));
		float localValueFrac = (localValueIndex - groupMinRange) / (groupMaxRange - groupMinRange);
		//float localValueFrac = gl_VertexID / (float)(NumBuckets-1);
		gl_Position.x = OffsetX + SizeX * localValueFrac;
		
		float val = HistogramBuffer[gl_VertexID];
		float normalizedValue = val / (float)max(1, groupMaxValue);

		gl_Position.y = OffsetY + SizeY * max(0, normalizedValue);
		gl_Position.z = 0.5f;
		gl_Position.w = 1.0f;
	}
}

export shader DrawPS
{
	void main()
	{
		gl_Target0 = LineColor;		
	}
}

//---
