/***
* Boomer Engine v4 2015-2017
* Written by Tomasz "Rex Dex" Jonarski
***/

//---

#include "common.h"

descriptor TestParams
{
    ConstantBuffer
    {
        vec4 Params;
        mat4 PixelCoordToWorld;
    }

    Texture2D PreviewTexture;
	attribute(uav, format=rgba8) Texture2D OutTexture;
}

//--

export shader NormalReconstructionCS
{
	vec3 PosToWorld(ivec2 pixelCoord, float linearZ)
    {
        vec4 positionWS = vec4(pixelCoord, linearZ, 1.0f) * PixelCoordToWorld;
        return positionWS.xyz / positionWS.w;
    }

    vec3 FetchViewPos(ivec2 pixelCoord)
    {
        float depth = textureLoadLod(PreviewTexture, pixelCoord, 0).x;
        return PosToWorld(pixelCoord, depth);
    }

    vec3 MinDiff(vec3 P, vec3 Pr, vec3 Pl)
    {
        vec3 V1 = Pr - P;
        vec3 V2 = P - Pl;
        return (dot(V1,V1) < dot(V2,V2)) ? V1 : V2;
    }

    vec3 ReconstructNormal(ivec2 pixelCoord, vec3 P)
    {
        vec3 Pr = FetchViewPos(pixelCoord + ivec2(1, 0));
        vec3 Pl = FetchViewPos(pixelCoord + ivec2(-1, 0));
        vec3 Pt = FetchViewPos(pixelCoord + ivec2(0, 1));
        vec3 Pb = FetchViewPos(pixelCoord + ivec2(0, -1));
        return normalize(cross(MinDiff(P, Pr, Pl), MinDiff(P, Pt, Pb)));
    }

    attribute(local_size_x=8, local_size_y=8)
	void main()
	{
	    vec3 pos = FetchViewPos(gl_GlobalInvocationID.xy);
        vec3 normal = ReconstructNormal(gl_GlobalInvocationID.xy, pos);

        OutTexture[gl_GlobalInvocationID.xy] = 0.5f + 0.5f*normal.xyz1;
	}
}

//--
