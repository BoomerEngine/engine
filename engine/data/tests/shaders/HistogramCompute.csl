/***
* Boomer Engine v4 2015-2017
* Written by Tomasz "Rex Dex" Jonarski
***/

#include "common.h"

//--

descriptor ComputeHistogramParams
{
    ConstantBuffer
    {
        uint ImageWidth;
        uint ImageHeight;
		uint ComponentType;
		uint NumBuckets;
		float VerticalScale;
    }

    attribute(uav, format=rgba8) Texture2D InputImage;
	attribute(uav, format=r32i) Buffer MinMaxBuffer;
	attribute(coherent, uav, format=r32i) Buffer HistogramBuffer;
}

shader HistogramCommon
{
	float GetHistogramValue()
	{
	    vec3 color = InputImage[gl_GlobalInvocationID.xy].xyz;

		if (ComponentType == 0)
			return color.x;
		else if (ComponentType == 1)
			return color.y;
		else if (ComponentType == 2)
			return color.z;
		else
			return dot(color.xyz, vec3(0.2, 0.7, 0.1));    
	}

	uint BucketIndex(float val, uint count)
	{
		float minValue = 0.0f;//intBitsToFloat(MinMaxBuffer[0]);
		float maxValue = 1.0f;//intBitsToFloat(MinMaxBuffer[1]); 

		if (maxValue <= minValue)
			return 0;

		float b = ((val - minValue) / (maxValue - minValue)) * (float)(count-1);
		int bi = round(b);
		if (bi < 0)
			bi = 0;
		else if (bi > (count-1))
			bi = count - 1;
		return bi;
	}
}

//---

export shader ComputeHistogramCS : HistogramCommon
{	
    attribute(local_size_x=8, local_size_y=8)
	void main()
	{
		if (gl_GlobalInvocationID.x < ImageWidth && gl_GlobalInvocationID.y < ImageHeight)
		{
			float colorVal = GetHistogramValue();
			uint bucket = BucketIndex(colorVal, NumBuckets);
			atomicIncrement(HistogramBuffer[bucket]);
		}
	}
}

//---
