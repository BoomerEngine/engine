/***
* Boomer Engine v4 2015-2017
* Written by Tomasz "Rex Dex" Jonarski
***/

#include "common.h"

export shader SimpleTrianglePS
{
	in vec4 PixelColor;

	void main()
	{
		gl_Target0 = PixelColor;
	}
}
 
export shader SimpleTriangleGS
{
	in float[] Size;
	in vec4[] Color;

	out vec4 PixelColor;

	attribute(input=points, output=triangle_strip, max_vertices=12)
	void main()
	{
		vec4 color = Color[0];
		vec4 center = gl_PositionIn[0];

		vec2 start, prev;

		int size = (int)Size[0];
		float frac = TWOPI / (float)size;
		for (int i=0; i<size; i+=1)
		{
			vec2 pos = vec2(sin(i * frac), cos(i * frac))  * 0.025f;

			if (i == 0)
			{
				start = pos;
			}
			else if (i == 1)
			{
				prev = pos;
			}
			else
			{
				PixelColor = color;
				gl_Position = center + start.xy00;
				EmitVertex();
				PixelColor = color;
				gl_Position = center + prev.xy00;
				EmitVertex();
				PixelColor = color;
				gl_Position = center + pos.xy00;
				EmitVertex();
				EndPrimitive();

				prev = pos;
			}
		}
	}
}

state PointList
{
	PrimitiveTopology = PointList,
}

attribute(state=PointList)
export shader SimpleTriangleVS
{
	vertex Simple3DVertex v;

	out vec4 Color;
	out float Size;

	void main()
	{
		gl_Position = v.pos.xyz1;
		Size = v.uv.x;
		Color = v.color;
	}
}
