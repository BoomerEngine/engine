/***
* Boomer Engine v4 2015-2017
* Written by Tomasz "Rex Dex" Jonarski
***/

//---

#include "common.h"

descriptor TestParams
{
    ConstantBuffer
    {
        vec4 Params;
        mat4 PixelCoordToWorld;
    }

    Texture2D PreviewTexture;
	attribute(uav) Texture2D OutTexture;
}

//--

shader LinearizeDepthCS
{
	const uint SideCount = 512;

    attribute(local_size_x=8, local_size_y=8)
	void main()
	{
	    float depth = textureLoadLod(PreviewTexture, gl_GlobalInvocationID.xy, 0).x;

        // proZ = (z * PZ + PW) / z;
        // proZ = PZ + PW/z;
        // proZ - PZ = PW/z;
        // z(proZ - PZ) = PW;
        // z = PW / (proZ - PZ);

	    float linearDepth = Params.w / (depth - Params.z);
	    OutTexture[gl_GlobalInvocationID.xy] = linearDepth;
	}
}

//--

shader MinMaxDepthCS
{
	const uint SideCount = 512;
    const uint BlockSideSize = 8;
    const uint BlockSize = 64;
    const uint BlockSizeLog2 = 6;

	shared float[64] MaxHeights;
    shared float[64] MinHeights;

    attribute(local_size_x=8, local_size_y=8)
	void main()
	{
	    // load the image
	    float depth = textureLoadLod(PreviewTexture, gl_GlobalInvocationID.xy, 0).x;
        MaxHeights[gl_LocalInvocationIndex % BlockSize] = depth;
        MinHeights[gl_LocalInvocationIndex % BlockSize] = depth;

        // parallel prefix reduction
        for (uint level=1; level<BlockSizeLog2; level += 1)
        {
            //uint level = 1;
            uint dist = 1 << level; // 2, 4, etc

            groupMemoryBarrier();

            if (gl_LocalInvocationIndex < (BlockSize / dist))
            {
                MaxHeights[gl_LocalInvocationIndex] = max(MaxHeights[gl_LocalInvocationIndex], MaxHeights[gl_LocalInvocationIndex + dist]);
                MinHeights[gl_LocalInvocationIndex] = min(MinHeights[gl_LocalInvocationIndex], MinHeights[gl_LocalInvocationIndex + dist]);
            }
        }

        // write the results
	    if ((gl_GlobalInvocationID.x & 7) == 0 && (gl_GlobalInvocationID.y & 7) == 0)
        {
	        //vec2 result = vec2(MinHeights[0] / 20.0f, MaxHeights[0] / 20.0f);
            vec2 result = vec2(frac(abs(MinHeights[0] - MaxHeights[0]) * 15.0), MaxHeights[0] / 20.0f);
            OutTexture[gl_GlobalInvocationID.xy / 8] = result.xy00;
        }
	}
}

//--

shader NormalReconstructionCS
{
	vec3 PosToWorld(ivec2 pixelCoord, float linearZ)
    {
        vec4 positionWS = mul(PixelCoordToWorld, vec4(pixelCoord, linearZ, 1.0f));
        return positionWS.xyz / positionWS.w;
    }

    vec3 FetchViewPos(ivec2 pixelCoord)
    {
        float depth = textureLoadLod(PreviewTexture, pixelCoord, 0).x;
        return PosToWorld(pixelCoord, depth);
    }

    vec3 MinDiff(vec3 P, vec3 Pr, vec3 Pl)
    {
        vec3 V1 = Pr - P;
        vec3 V2 = P - Pl;
        return (dot(V1,V1) < dot(V2,V2)) ? V1 : V2;
    }

    vec3 ReconstructNormal(ivec2 pixelCoord, vec3 P)
    {
        vec3 Pr = FetchViewPos(pixelCoord + ivec2(1, 0));
        vec3 Pl = FetchViewPos(pixelCoord + ivec2(-1, 0));
        vec3 Pt = FetchViewPos(pixelCoord + ivec2(0, 1));
        vec3 Pb = FetchViewPos(pixelCoord + ivec2(0, -1));
        return normalize(cross(MinDiff(P, Pr, Pl), MinDiff(P, Pt, Pb)));
    }

    attribute(local_size_x=8, local_size_y=8)
	void main()
	{
	    vec3 pos = FetchViewPos(gl_GlobalInvocationID.xy);
        vec3 normal = ReconstructNormal(gl_GlobalInvocationID.xy, pos);

        OutTexture[gl_GlobalInvocationID.xy] = 0.5f + 0.5f*normal.xyz1;
	}
}

//--

const int NUM_STEPS = 4;
const int NUM_DIRECTIONS = 8;
const float Alpha = 2.0 * PI / NUM_DIRECTIONS;

shader SSAOCS
{
    vec3 PosToWorld(ivec2 pixelCoord, float linearZ)
    {
        vec4 positionWS = mul(PixelCoordToWorld, vec4(pixelCoord, linearZ, 1.0f));
        return positionWS.xyz / positionWS.w;
    }

    vec3 FetchViewPos(ivec2 pixelCoord)
    {
        float depth = textureLoadLod(PreviewTexture, pixelCoord, 0).x;
        return PosToWorld(pixelCoord, depth);
    }

    vec3 MinDiff(vec3 P, vec3 Pr, vec3 Pl)
    {
        vec3 V1 = Pr - P;
        vec3 V2 = P - Pl;
        return (dot(V1,V1) < dot(V2,V2)) ? V1 : V2;
    }

    vec3 ReconstructNormal(ivec2 pixelCoord, vec3 P)
    {
        vec3 Pr = FetchViewPos(pixelCoord + ivec2(1, 0));
        vec3 Pl = FetchViewPos(pixelCoord + ivec2(-1, 0));
        vec3 Pt = FetchViewPos(pixelCoord + ivec2(0, 1));
        vec3 Pb = FetchViewPos(pixelCoord + ivec2(0, -1));
        return normalize(cross(MinDiff(P, Pr, Pl), MinDiff(P, Pt, Pb)));
    }

    const float controlNDotVBias = 0.0f;
    const float controlNegInvR2 = -1.0f / 2.0f;
    const float controlRadiusToScreen = 32.0f;

    float RandFloat(vec2 co)
    {
        return frac(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);
    }

    float Falloff(float DistanceSquare)
    {
        // 1 scalar mad instruction
        return DistanceSquare * controlNegInvR2 + 1.0;
    }

    float ComputeAO(vec3 P, vec3 N, vec3 S)
    {
        vec3 V = S - P;
        float VdotV = dot(V, V);
        float NdotV = dot(N, V) * 1.0/sqrt(VdotV);

        // Use saturate(x) instead of max(x,0.f) because that is faster on Kepler
        return clamp(NdotV - controlNDotVBias,0,1) * saturate(Falloff(VdotV));
    }

    vec2 RotateDirection(vec2 Dir, vec2 CosSin)
    {
        return vec2(Dir.x*CosSin.x - Dir.y*CosSin.y, Dir.x*CosSin.y + Dir.y*CosSin.x);
    }

    vec4 GetJitter(vec2 co)
    {
        float rand = RandFloat(co) * PI * 2.0f;
        float randz = RandFloat(co*2);
        float randw = RandFloat(co*2.1234);
        return vec4(cos(rand), sin(rand), randz, randw);
    }

    float ComputeCoarseAO(ivec2 FullResUV, float RadiusPixels, vec4 Rand, vec3 ViewPosition, vec3 ViewNormal)
    {
        // Divide by NUM_STEPS+1 so that the farthest samples are not fully attenuated
        float StepSizePixels = 25.0f / (NUM_STEPS + 1);

        float AO = 0;
        for (int DirectionIndex = 0; DirectionIndex < NUM_DIRECTIONS; DirectionIndex += 1)
        {
            float Angle = Alpha * DirectionIndex;
            //float Angle = 0.0f;

            // Compute normalized 2D direction
            vec2 Direction = RotateDirection(vec2(cos(Angle), sin(Angle)), Rand.xy);
            //return Direction.y - Direction.x;

            // Jitter starting sample within the first step
            float RayPixels = (Rand.z * StepSizePixels + 1.0);
            for (int StepIndex = 0; StepIndex < NUM_STEPS; StepIndex += 1)
            {
                ivec2 SnappedUV = FullResUV + (RayPixels * Direction);
                vec3 S = FetchViewPos(SnappedUV);
                RayPixels += StepSizePixels;

                AO += ComputeAO(ViewPosition, ViewNormal, S);
            }
        }

        AO /= (NUM_DIRECTIONS * NUM_STEPS);
        return saturate(1.0 - AO * 2.0f);
    }

    attribute(local_size_x=8, local_size_y=8)
    void main()
    {
        vec3 ViewPosition = FetchViewPos(gl_GlobalInvocationID.xy);
        vec3 ViewNormal = -ReconstructNormal(gl_GlobalInvocationID.xy, ViewPosition);

        float ScreenDepth = textureLoadLod(PreviewTexture, gl_GlobalInvocationID.xy, 0).x;
        float LinearDepth = Params.w / (ScreenDepth - Params.z);

        float RadiusPixels = controlRadiusToScreen / LinearDepth;

        vec4 Rand = GetJitter(gl_GlobalInvocationID.xy / 512.0f);
        float AO = ComputeCoarseAO(gl_GlobalInvocationID.xy, RadiusPixels, Rand, ViewPosition, ViewNormal);

        OutTexture[gl_GlobalInvocationID.xy] = AO.xxx1;
    }
};

//--

program LinearizeDepth
{
	shader ComputeShader = shader<LinearizeDepthCS> {};
}

program MinMaxDepth
{
	shader ComputeShader = shader<MinMaxDepthCS> {};
}

program NormalReconstruction
{
	shader ComputeShader = shader<NormalReconstructionCS> {};
}

program SSAO
{
	shader ComputeShader = shader<SSAOCS> {};
}

export LinearizeDepth = program<LinearizeDepth> {};
export MinMaxDepth = program<MinMaxDepth> {};
export NormalReconstruction = program<NormalReconstruction> {};
export SSAO = program<SSAO> {};

//--


