// BoomerEngine Script interface
// (C) 2017-2020 by Tomasz "RexDex" Jonarski
//
// Runtime time info

//-------

// general type information
import struct TypeInfo alias 'base::script::TypeInfo'
{
    //--
    
    // get the engine strid of the type
    import function strid GetName();
    
    //--
    
    // is this a valid type ?
    import function bool IsValid();
    
    // was this type defined in scripts ?
    import function bool IsScripted();
    
    // is this a simple value type ? (bool/float, etc)
    import function bool IsSimple();
    
    // is this a structure/class type
    import function bool IsClass();
    
    // is this an enum type
    import function bool IsEnum();
    
    // is this a shared pointer type
    import function bool IsPointer();

    // is this a weak pointer type
    import function bool IsWeakPointer();
    
    // is this a dynamic array
    import function bool IsDynamicArray();
    
    // is this a static array
    import function bool IsStaticArray();
    
    //--
    
    // get as class type info
    import function ClassInfo AsClass();
    
    // get as class type info
    import function ArrayInfo AsArray();
    
    // for pointers get the pointer class
    import function ClassInfo PointedClass();
    
    // get as enum type info
    import function EnumInfo AsEnum();
    
    //--
}

//---
// class type information

import struct ClassInfo alias 'base::script::ClassTypeInfo'
{

    //--
    
    // is this a valid class type ?
    import function bool IsValid();
    
    // is this an abstract class
    import function bool IsAbstract();
    
    // is this a structure
    import function bool IsStruct();
    
    // was this class defined in scripts 
    import function bool IsScripted();

    // get the engine strid of the class
    import function strid GetName();
    
    // get type info for this class
    import function TypeInfo GetTypeInfo();
    
    // get base class
    import function ClassInfo GetBaseClassInfo();
    
    //--
    
    // check if this class is derived from given class, SLOW because it check by strid
    import function alias(IsA) bool DerivesFromClassName(strid className);
    
    // check if this object implements given class
    import function alias(IsA) bool DerivesFromClassInfo(ref ClassInfo classInfo);
    
    // check if this object implements given class
    import function alias(IsA) bool DerivesFromClass(class<Object> classType);
    
    //--
    
    // get class type, valid only for classes deriving from object
    import function class<Object> GetClassType();
    
    //--
    
    // get all properties
    import function array<PropertyInfo> GetProperties();
    
    // get properties of this class only 
    import function array<PropertyInfo> GetLocalProperties();
    
    // find property by strid
    import function PropertyInfo FindProperty(strid propertyName);
    
    //--
    
    // get all functions in this class
    import function array<FunctionInfo> GetFunctions();
    
    // get functions of this class only 
    import function array<FunctionInfo> GetLocalFunctions();
    
    // find function by strid
    import function FunctionInfo FindFunction(strid functionName);
    
}

//---
// array type information

import struct ArrayInfo alias 'base::script::ArrayTypeInfo'
{

    //--
    
    // is this a valid type ?
    import function bool IsValid();
    
    // get type info for this class
    import function TypeInfo GetTypeInfo();

    // get the inner type of the array
    import function TypeInfo GetInnerTypeInfo();
    
    // get the engine strid of the type
    import function strid GetName();
    
    // is this an array with static size ?
    import function bool HasStaticSize();
    
    // get the static size for the array
    import function int GetStaticSize();
    
    //--
    
}

//---
// property information

import struct PropertyInfo alias 'base::script::PropertyInfo'
{
    //--
    
    // is this property valid ?
    import function bool IsValid();
    
    // is this property defined in scripts 
    import function bool IsScripted();
    
    // is this property editable by the user in the editor ?
    import function bool IsEditable();
    
    // is this property readonly by the user in the editor ?
    import function bool IsReadonly();
    
    // get the class this property was defined at
    import function ClassInfo GetParentClassInfo();
    
    // get strid of the property
    import function strid GetName();
    
    // get display category of the property
    import function strid GetCategory();
    
    // get type of the property
    import function TypeInfo GetTypeInfo();
    
    //--
    
}

//---
// enum information

import struct EnumInfo alias 'base::script::EnumTypeInfo'
{
    //--
    
    // is this property valid ?
    import function bool IsValid();
    
    // is this property defined in scripts 
    import function bool IsScripted();
    
    // get strid of the enum
    import function strid GetName();
    
    // get back the generic type info
    import function TypeInfo GetTypeInfo();
    
    //--
    
    // get maximum enum value
    import function int GetMaxValue();
    
    // get minumum enum value
    import function int GetMinValue();
    
    // get all enum strids
    import function array<strid> GetOptions();
    
    // find value for given option strid, returns default value if not found
    import function int GetValue(strid optionName, int defaultValue=-1);
    
    // get strid for given value, returns empty strid if not found
    import function strid GetOptionName(int value);
    
    // find value for given option strid, returns false if not found
    import function bool GetValueSafe(strid optionName, out int value);
    
    //--
    
    // find value for given option strid, returns default value if not found
    import function int64 GetValue64(strid optionName, int64 defaultValue=-1);
    
    // get strid for given value, returns empty strid if not found
    import function strid GetOptionName64(int64 value);
    
    // find value for given option strid, returns false if not found
    import function bool GetValueSafe64(strid optionName, out int64 value);
        
}

//---
// function information

import struct FunctionInfo alias 'base::script::FunctionInfo'
{

    //--
    
    // is this function valid ?
    import function bool IsValid();
    
    // is this function defined in scripts 
    import function bool IsScripted();
    
    // is this function static ?
    import function bool IsStatic();
    
    // is this function global ?
    import function bool IsGlobal();
    
    // get strid of the function
    import function strid GetName();

    // get the owning class, invalid for global functions
    import function ClassInfo GetParentClassInfo();
    
    //--
    
    // get return type
    import function TypeInfo GetReturnType();
    
    // get number of arguments
    import function int GetArgumentCount();
    
    // get type of n-th argument
    import function TypeInfo GetArgumentTypeInfo(int n);
    
    //--
    
}

//---
// cast operators for easier ifing

cast(1) bool (ref FunctionInfo x) { return x.IsValid(); }
cast(1) bool (ref TypeInfo x) { return x.IsValid(); }
cast(1) bool (ref ClassInfo x) { return x.IsValid(); }
cast(1) bool (ref PropertyInfo x) { return x.IsValid(); }
cast(1) bool (ref ArrayInfo x) { return x.IsValid(); }
cast(1) bool (ref EnumInfo x) { return x.IsValid(); }

//---
// global type access

// find type info by strid
import function TypeInfo FindTypeInfo(strid typeName);

// find class info by strid
import function ClassInfo FindClassInfo(strid className);

// get class info for given class reference
import function ClassInfo GetClassInfo(class<Object> classType);

// enumerate child classes
import function EnumChildClassInfos(ClassInfo parentClass, out array<ClassInfo> outClasses);

// enumerate child classes
import function EnumChildClasses(class<Object> parentClass, out array< class<Object> > outClasses);

// find enum type information
import function EnumInfo FindEnum(strid enumName);

// find class declaration
import function class<Object> FindClass(strid className);

// find global function
import function FunctionInfo FindFunction(strid functionName);

//---
