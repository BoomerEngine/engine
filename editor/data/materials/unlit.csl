/***
* Boomer Engine v4 2015-2017
* Written by Tomasz "Rex Dex" Jonarski
*
* Simple material interface
*
***/

#include <shaders/materials/material_pass.csl>

/// material data
material descriptor UnlitMaterialParams
{
    ConstantBuffer Data
    {
        float4 ColorTint;
        float MaskThreshold;
        name MaskMode;
    }
    
    Texture2D ColorMap;
    Texture2D MaskMap;
    Texture2D OpacityMap;
}        

/// a simple unlit material that returns single color
shader Material
{
    permutation bool FLAG_MASKED;

    float computeMaskAlpha(float2 uv)
    {
        if (FLAG_MASKED)
        {
            float maskDefault = texture(UnlitMaterialParams.ColorMap, uv).a;
            float maskMask = texture(UnlitMaterialParams.MaskMap, uv).r;

            if (UnlitMaterialParams.Data.MaskMode == 'AlphaFromDefaultMap')
                return maskDefault;
            else if (UnlitMaterialParams.Data.MaskMode == 'AlphaFromMaskMap')
                return maskMask; 
            else if (UnlitMaterialParams.Data.MaskMode == 'MultiplyDefaultAndMask')
                return maskDefault * maskMask;
        }
        else
        {
            return 1.0f;
        }
    }

    void writeDepth(program<VertexAttributesBase> v)
    {
        if (FLAG_MASKED)
        {
            float alpha = computeMaskAlpha(v.GetUV());
            if (alpha < UnlitMaterialParams.Data.MaskThreshold)
                discard;
        }
    }

    float4 computeNormalColor(program<VertexAttributesBase> v)
    {
        float2 uv = v.GetUV();
        
        /*if (FLAG_MASKED)
        {
            //return computeMaskAlpha(v.GetUV()).xxxx;
            //return UnlitMaterialParams.Data.MaskThreshold.xxxx;
        }*/ 

        float4 col = texture(UnlitMaterialParams.ColorMap, uv); 
        col.xyz = pow(col.xyz, 2.2f) * col.a * UnlitMaterialParams.Data.ColorTint.xyz;
        return col;
	}
	
    float3 computeDebugColor(program<VertexAttributesBase> v, name debugMode)
	{
        // emit data from material
	    if (debugMode == 'MaterialBaseColor')
	    {
            return texture(UnlitMaterialParams.ColorMap, v.GetUV()).xyz * UnlitMaterialParams.Data.ColorTint.xyz;
        }
        else if (debugMode == 'MaterialAmbientOcclusion')
	    {
    	    return float3(0,0,0);
        }
        else if (debugMode == 'MaterialReflectivity')
	    {
    	    return float3(0,0,0);
        }
	    else if (debugMode == 'MaterialSpecularity')
	    {
    	    return float3(0,0,0);
        }
        else if (debugMode == 'MaterialSpecularPower')
	    {
    	    return float3(0,0,0);
        }
	    else if (debugMode == 'MaterialMetalic')
	    {
    	    return float3(0,0,0);
        }
	    else if (debugMode == 'MaterialRoughness')
	    {
    	    return float3(0,0,0);
        }
	    else if (debugMode == 'MaterialTranslucency')
	    {
    	    return float3(0,0,0);
        }
        else if (debugMode == 'MaterialOpacity')
	    {
    	    return computeMaskAlpha(v.GetUV()).xxx;
        }
	    else if (debugMode == 'ViewNormals')
	    {
            float3 n, t, b;
            v.GetWorldTangentSpace(n, t, b);

            return 0.5f + 0.5f*normalize(mul(n.xyz0, CameraParams.Data.WorldToScreen).xyz);
        }
	    else if (debugMode == 'WorldNormals')
	    {
            float3 n, t, b;
            v.GetWorldTangentSpace(n, t, b);

	        return 0.5f + 0.5f*n.xyz;
        }
        else if (debugMode == 'WorldTangents')
        {
            float3 n, t, b;
            v.GetWorldTangentSpace(n, t, b);

            return 0.5f + 0.5f*t.xyz;
        }
        else if (debugMode == 'WorldBitangents')
        {
            float3 n, t, b;
            v.GetWorldTangentSpace(n, t, b);

            return 0.5f + 0.5f*t.xyz;
        }
        else if (debugMode == 'MaterialType')
        {
            return float3(0.0f, 1.0f, 1.0f);
        }
        
    	// just output default color
		float4 objectColor = v.GetObjectColor();
        //return lerp(DebugColor, objectColor, min(objectColor.a, DebugColor.a)).xyz; // lerp between object color and the debug color
		return objectColor.xyz;
	}
}
