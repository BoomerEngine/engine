/***
* Boomer Engine v4 2015-2017
* Written by Tomasz "Rex Dex" Jonarski
*
* Template for HL2 interop
*
***/

#include <shaders/material_debug.csl>
#include <shaders/common/lighting_phong.csl>

/// material data
material descriptor PhongMaterialParams
{
    ConstantBuffer
    {
        int Masked;
        float MaskThreshold;
        float SpecularPower;
        float4 DiffuseColor;
        float4 EmissiveColor;     
    }
    
    Texture2D DiffuseMap;
    Texture2D NormalMap;
    Texture2D SpecularMap;
    Texture2D EmissiveMap;    
    Texture2D AmbientOcclusionMap;
}        

/// a simple unlit material that returns single color
shader PhongMaterial
{
    implements MaterialWithDebug;

	uniform float4 DiffuseColor;
    uniform float4 EmissiveColor;
	uniform float MaskThreshold;
    uniform float SpecularPower;
    uniform int Masked;
    
	uniform Texture2D<float4> DiffuseMap;
	uniform Texture2D<float4> NormalMap;
    uniform Texture2D<float4> SpecularMap;
	uniform Texture2D<float4> EmissiveMap;	
	uniform Texture2D<float4> AmbientOcclusionMap;	
	
	float3 UnpackWorldNormalFromTangentSpaceTexture(const program<VertexAttributesBase> v, float3 tangentNormalTexture)
    {
        // unpack to -1,1 range
        float3 unpackedNormal = 2.0f * tangentNormalTexture - 1.0f;

        // get tangent space at vertex
        float3 n, t, b;
        v.GetWorldTangentSpace(n, t, b);

        // apply tangent space
        float3 worldNormal = t * unpackedNormal.x;// * NormalScale;
        worldNormal += b * unpackedNormal.y;// * NormalScale;
        worldNormal += n * unpackedNormal.z;
		return normalize(worldNormal);          
	}
	
	float computeAlpha(float2 uv)
    {
        return texture(DiffuseMap, uv).a;        
    }

    override void writeDepth(const program<VertexAttributesBase> v)
    {
        float alpha = computeAlpha(v.GetUV());
        if (Masked && alpha < MaskThreshold)
            discard;
    }
	
	override void computePixelFragment(const program<VertexAttributesBase> v, out PixelFragment p)
	{
        // compute normal
        float2 uv = v.GetUV();
        float3 tangentSpaceNormal = texture(NormalMap, uv).xyz;
        p.WorldNormal = UnpackWorldNormalFromTangentSpaceTexture(v, tangentSpaceNormal);
        
		// setup material attributes
        p.BaseColor = pow(texture(DiffuseMap, uv).xyz, 2.2f) * DiffuseColor.xyz;
        p.Specularity = texture(SpecularMap, uv).x;
        p.EmissiveColor = texture(EmissiveMap, uv).xyz * EmissiveColor.xyz;
        p.SpecularPower = SpecularPower;
        p.AmbientOcclusion = texture(AmbientOcclusionMap, uv).x;
        p.Opacity = computeAlpha(uv);
	}	
	
    override void configure()
    {
        state.params.type = 'PhongMaterialParams';
        MaterialWithDebug.configure();
    }
    
    override float4 computeNormalColor(const program<VertexAttributesBase> v)
    {
	    // get tangent space at vertex
        float3 n, t, b;
        v.GetWorldTangentSpace(n, t, b);

		// compute PBR material params
		PixelFragment p;
        p.WorldPosition = v.GetWorldPosition();
		p.WorldNormal = n;
        computePixelFragment(v, p);

		// calculate lighting
		float3 color = GLighting.computeLightingAtPixel(p);

		// output with unchanged opacity
		return float4(color, p.Opacity);        
	}

    //--
    
    override const float3 getMaterialTypeColor()
    {
        return float3(0.0f, 1.0f, 0.0f);
    }
}

/// implement the material interface
override const program<Material> GMaterial = program<PhongMaterial> {};
