/***
* Boomer Engine v4 2015-2017
* Written by Tomasz "Rex Dex" Jonarski
*
* Template for HL2 interop
*
***/

#include <shaders/materials/material_lit.csl>
#include <shaders/common/pbr.csl>
#include <shaders/common/lighting_pbr.csl>

/// material data
material descriptor PBRSimpleMaterialParams
{
    ConstantBuffer Data
    {
        int Masked;
        float MaskThreshold;
        int InvertRoughness;
        int InvertMetalic;
        int RoughnessFromAlpha;
        int MetalicFromAlpha;        
    }
    
    Texture2D BaseColorMap;
    Texture2D NormalMap;
    Texture2D MetalicMap;
    Texture2D RoughnessMap;
    Texture2D ReflectanceMap;
    Texture2D AmbientOcclusionMap;
}        

/// a simple unlit material that returns single color
shader Material
{
	float3 UnpackWorldNormalFromTangentSpaceTexture(program<VertexAttributesBase> v, float3 tangentNormalTexture)
    {
        // unpack to -1,1 range
        float3 unpackedNormal = 2.0f * tangentNormalTexture - 1.0f;

        // get tangent space
        float3 n, t, b;
        v.GetWorldTangentSpace(n, t, b);
        
        // apply tangent space
		float3 worldNormal = t * unpackedNormal.x;// * NormalScale;
		worldNormal += b * unpackedNormal.y;// * NormalScale;
		worldNormal += n * unpackedNormal.z;
		return normalize(worldNormal);          
	}
	
	float computeAlpha(float2 uv)
    {
        return texture(PBRSimpleMaterialParams.BaseColorMap, uv).a;
    }
    
    void writeDepth(program<VertexAttributesBase> v)
    {
        float alpha = computeAlpha(v.GetUV());
        if (PBRSimpleMaterialParams.Data.Masked && alpha < PBRSimpleMaterialParams.Data.MaskThreshold)
            discard;
    }
	
	void computePixelFragment(program<VertexAttributesBase> v, out PixelFragment p)
	{
        // compute normal
        float2 uv = v.GetUV();
        float3 tangentSpaceNormal = texture(PBRSimpleMaterialParams.NormalMap, uv).xyz;
        p.WorldNormal = UnpackWorldNormalFromTangentSpaceTexture(v, tangentSpaceNormal);
        
		// setup material attributes
        p.BaseColor = pow(texture(PBRSimpleMaterialParams.BaseColorMap, uv).xyz, 2.2f)  * v.GetColor().xyz;
        p.AmbientOcclusion = texture(PBRSimpleMaterialParams.AmbientOcclusionMap, uv).x;
        p.Reflectivity = texture(PBRSimpleMaterialParams.ReflectanceMap, uv).x;
        p.Opacity = computeAlpha(uv);        
        
        // unpack roughness
        float2 rmap = texture(PBRSimpleMaterialParams.RoughnessMap, uv).xw;
        float r = PBRSimpleMaterialParams.Data.RoughnessFromAlpha ? rmap.y : rmap.x;
        p.Roughness = PBRSimpleMaterialParams.Data.InvertRoughness ? (1.0f - r) : r;
        
        // unpack metalic
        float2 mmap = texture(PBRSimpleMaterialParams.MetalicMap, uv).xw;
        float m = PBRSimpleMaterialParams.Data.MetalicFromAlpha ? mmap.y : mmap.x;
        p.Metalic = PBRSimpleMaterialParams.Data.InvertMetalic ? (1.0f - m) : m;
	}	
	
	float3 getMaterialTypeColor()
    {
        return float3(0.0f, 1.0f, 0.0f);
    }
}
